{
    "Competitive Programming Boilerplate": {
        "prefix": "cpjava",
        "body": [
            "import java.io.*;",
            "import java.util.*;",
            "",
            "public class ${1:Main} {",
            "    static FastReader in;",
            "    static PrintWriter out;",
            "",
            "    public static void main(String[] args) throws Exception {",
            "        boolean isOnlineJudge = System.getProperty(\"ONLINE_JUDGE\") != null;",
            "",
            "        if (!isOnlineJudge) {",
            "            in = new FastReader(new FileInputStream(\"input.txt\"));",
            "            out = new PrintWriter(new FileOutputStream(\"output.txt\"));",
            "        } else {",
            "            in = new FastReader(System.in);",
            "            out = new PrintWriter(System.out);",
            "        }",
            "",
            "        int t = 1;",
            "        // t = in.nextInt(); // Uncomment if multiple test cases",
            "        while (t-- > 0) {",
            "            solve();",
            "        }",
            "",
            "        out.flush();",
            "        out.close();",
            "    }",
            "",
            "    static void solve() {",
            "        // Your problem-solving code here",
            "        $0",
            "    }",
            "",
            "    // ----------- Fast Input Class --------------",
            "    static class FastReader {",
            "        BufferedReader br;",
            "        StringTokenizer st;",
            "",
            "        public FastReader(InputStream stream) {",
            "            br = new BufferedReader(new InputStreamReader(stream));",
            "        }",
            "",
            "        String next() {",
            "            while (st == null || !st.hasMoreElements()) {",
            "                try { st = new StringTokenizer(br.readLine()); }",
            "                catch (IOException e) { e.printStackTrace(); }",
            "            }",
            "            return st.nextToken();",
            "        }",
            "",
            "        int nextInt() { return Integer.parseInt(next()); }",
            "        long nextLong() { return Long.parseLong(next()); }",
            "        double nextDouble() { return Double.parseDouble(next()); }",
            "        String nextLine() {",
            "            String str = \"\";",
            "            try { str = br.readLine(); }",
            "            catch (IOException e) { e.printStackTrace(); }",
            "            return str;",
            "        }",
            "    }",
            "}"
        ],
        "description": "Competitive Programming Java Boilerplate with Fast I/O"
    }
} 